class Solution:

    # Recursive helper to replace previous value at (x, y) and surrounding cells
    def fillUtil(self, grid, x, y, prevV, newV):
        m = len(grid)
        n = len(grid[0])

        # Base cases
        if x < 0 or x >= m or y < 0 or y >= n:
            return
        if grid[x][y] != prevV:
            return

        # Replace current cell
        grid[x][y] = newV

        # Recur for 4 directions
        self.fillUtil(grid, x + 1, y, prevV, newV)
        self.fillUtil(grid, x - 1, y, prevV, newV)
        self.fillUtil(grid, x, y + 1, prevV, newV)
        self.fillUtil(grid, x, y - 1, prevV, newV)

    def fill(self, grid):
        m = len(grid)
        n = len(grid[0])

        # Replace all 'O' with temporary '-'
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 'O':
                    grid[i][j] = '-'

        # Flood fill for '-' connected to edges
        for i in range(m):
            if grid[i][0] == '-':
                self.fillUtil(grid, i, 0, '-', 'O')
            if grid[i][n - 1] == '-':
                self.fillUtil(grid, i, n - 1, '-', 'O')

        for j in range(n):
            if grid[0][j] == '-':
                self.fillUtil(grid, 0, j, '-', 'O')
            if grid[m - 1][j] == '-':
                self.fillUtil(grid, m - 1, j, '-', 'O')

        # Replace remaining '-' with 'X'
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '-':
                    grid[i][j] = 'X'
